# Generated by Django 5.2.4 on 2025-07-13 08:43

from django.db import migrations


def clean_duplicate_visitors(apps, schema_editor):
    """Clean up duplicate visitors before adding unique constraint"""
    Visitor = apps.get_model('visitorapi', 'Visitor')
    VisitRequest = apps.get_model('visitorapi', 'VisitRequest')
    
    # Find all visitors
    all_visitors = Visitor.objects.all()
    
    # Group visitors by name and phone (more flexible matching)
    visitor_groups = {}
    for visitor in all_visitors:
        key = (visitor.first_name, visitor.last_name, visitor.phone)
        if key not in visitor_groups:
            visitor_groups[key] = []
        visitor_groups[key].append(visitor)
    
    # For each group with duplicates, keep the first one and update all references
    for key, visitors in visitor_groups.items():
        if len(visitors) > 1:
            # Keep the first visitor (oldest one)
            primary_visitor = visitors[0]
            duplicate_visitors = visitors[1:]
            
            print(f"Found duplicates for {primary_visitor.first_name} {primary_visitor.last_name}")
            print(f"Keeping visitor ID {primary_visitor.id}, removing {len(duplicate_visitors)} duplicates")
            
            # Update all visit requests to point to the primary visitor
            for duplicate_visitor in duplicate_visitors:
                # Update all visit requests that reference this duplicate visitor
                VisitRequest.objects.filter(visitor=duplicate_visitor).update(visitor=primary_visitor)
                
                # Delete the duplicate visitor
                duplicate_visitor.delete()


def reverse_clean_duplicate_visitors(apps, schema_editor):
    """Reverse operation - this cannot be reversed safely"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('visitorapi', '0014_visitrequest_checkout_by_hr'),
    ]

    operations = [
        # First clean up duplicate visitors
        migrations.RunPython(clean_duplicate_visitors, reverse_clean_duplicate_visitors),
        
        # Then add the unique constraint
        migrations.AlterUniqueTogether(
            name='visitor',
            unique_together={('first_name', 'last_name', 'phone', 'company')},
        ),
    ]
